package in.terek.photoapp.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMAGE_FILES".
*/
public class ImageFilesDao extends AbstractDao<ImageFiles, Long> {

    public static final String TABLENAME = "IMAGE_FILES";

    /**
     * Properties of entity ImageFiles.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FileName = new Property(1, Long.class, "fileName", false, "FILE_NAME");
        public final static Property LocalUriPath = new Property(2, String.class, "localUriPath", false, "LOCAL_URI_PATH");
        public final static Property ServerUriPath = new Property(3, String.class, "serverUriPath", false, "SERVER_URI_PATH");
        public final static Property CreationDate = new Property(4, java.util.Date.class, "creationDate", false, "CREATION_DATE");
    }


    public ImageFilesDao(DaoConfig config) {
        super(config);
    }
    
    public ImageFilesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IMAGE_FILES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"FILE_NAME\" INTEGER," + // 1: fileName
                "\"LOCAL_URI_PATH\" TEXT," + // 2: localUriPath
                "\"SERVER_URI_PATH\" TEXT," + // 3: serverUriPath
                "\"CREATION_DATE\" INTEGER);"); // 4: creationDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMAGE_FILES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ImageFiles entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindLong(2, fileName);
        }
 
        String localUriPath = entity.getLocalUriPath();
        if (localUriPath != null) {
            stmt.bindString(3, localUriPath);
        }
 
        String serverUriPath = entity.getServerUriPath();
        if (serverUriPath != null) {
            stmt.bindString(4, serverUriPath);
        }
 
        java.util.Date creationDate = entity.getCreationDate();
        if (creationDate != null) {
            stmt.bindLong(5, creationDate.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ImageFiles entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindLong(2, fileName);
        }
 
        String localUriPath = entity.getLocalUriPath();
        if (localUriPath != null) {
            stmt.bindString(3, localUriPath);
        }
 
        String serverUriPath = entity.getServerUriPath();
        if (serverUriPath != null) {
            stmt.bindString(4, serverUriPath);
        }
 
        java.util.Date creationDate = entity.getCreationDate();
        if (creationDate != null) {
            stmt.bindLong(5, creationDate.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ImageFiles readEntity(Cursor cursor, int offset) {
        ImageFiles entity = new ImageFiles( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // fileName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // localUriPath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // serverUriPath
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)) // creationDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ImageFiles entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFileName(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setLocalUriPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setServerUriPath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreationDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ImageFiles entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ImageFiles entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ImageFiles entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
